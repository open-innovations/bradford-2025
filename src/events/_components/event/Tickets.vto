{{ if tickets?.by_geography && (tickets?.by_geography.length > 0) }}
<section>
<h2>Tickets</h2>

<h3>Geographic ticket allocation</h3>
{{> const by_ward = tickets.by_geography
        .filter(x => x.start == 'ALL' && x.geography_type == 'osward' && x.geography_code !== 'OTHER')
        .map(w => ({
            ...w,
            ...geojson.bd_wards.features.map(x => x.properties).find(x => x.WD24CD === w.geography_code)
        }))
}}

<section class="grid regular">
<div class="block fix-svg-ratio-bd">

{{ comp.MapSelector({
	type: 'ward',
	data: by_ward,
	scale: scales.yellow,
	value: 'count_of_tickets',
	tooltip: '<b>{{ WD24NM }}</b>:\n{{ count_of_tickets }} tickets sold',
	caption: 'Schematic presentation of tickets sold by Bradford Ward.',
	hex: {
		id: 'tickets-hex',
		matchKey:'geography_code',
		label: 'short_code',
	},
	geo: {
		id: 'tickets-geo',
		key: 'geography_code',
	}
}) }}

</div>

<div>
<p>
The maps show tickets sold across the wards of Bradford.
</p>
<p>
Tickets were issued to attendees from the following Local Authorities.
This list contains any Local Authority with a count of more than 20 tickets:
</p>

{{>
    const oslauaTickets = tickets.by_geography
    .map(x => ({ geography_code: "UNKNOWN", ...x }))
    .filter(
        x => x.start === 'ALL' && x.geography_type === 'oslaua' && x.count_of_tickets > 20
    )
    .sort((a, b) => b.count_of_tickets - a.count_of_tickets)
    .map(x => ({ ...x, name: codes.la[x.geography_code]?.name || x.geography_code }))
}}

<table style="margin-inline: auto;">
<thead>
<tr>
    <th scope="col">Local Authority</th>
    <th scope="col">Count of tickets</th></tr>
</thead>
<tbody>
{{ for area of oslauaTickets }}
{{ if !['MISSING', 'UNMATCHED'].includes(area.geography_code) }}
    <tr>
    <th scope="row">{{ area.name }}</th>
    <td style="text-align: center;">{{ area.count_of_tickets.toLocaleString() }}</td>
    </tr>
{{ /if }}
{{ /for }}
</tbody>
</table>

<p>
{{>
    const unmatched = oslauaTickets.find(x => x.geography_code === 'UNMATCHED');
    const missing = oslauaTickets.find(x => x.geography_code === 'MISSING');
}}
{{ if missing }}
There were
<b>{{ oslauaTickets.find(x => x.geography_code === 'MISSING').count_of_tickets.toLocaleString() }} tickets</b>
orders either missing a postcode or associated with a postcode which cannot be mapped to a geographic area.
{{ /if }}
{{ if unmatched }} There were also
<b>{{ unmatched.count_of_tickets.toLocaleString() }} tickets</b>
that could not be assigned to a local authority, either as they were outside the UK,
or the ticket holder's postcode was invalid.
{{ /if }}
</p>
</section>

<h3>Ticket types</h3>

<section class="grid regular">
<div class="block">
 
{{>
    function ticketReducer(a, c) {
        const key = c.type;
        return { ...a, [key]: c.percentage + (a[key] || 0)};
    }

    const ticketsByType = tickets.by_type.reduce(ticketReducer, {});

    const series = [
            {
                value: 'Full Price', title: 'Full price', colour: '#F4ACCD',
                tooltip: 'Full price tickets <b>{{ Full Price }}%</b>',
            },
            {
                value: 'Child Ticket', title: 'Child', colour: '#45D108',
                tooltip: 'Child tickets <b>{{ Child Ticket }}%</b>',
            },
            {
                value: 'Senior Ticket', title: 'Senior', colour: '#E0B942',
                tooltip: 'Senior tickets <b>{{ Senior Ticket }}%</b>',
            },
            {
                value: 'Community Ticket', title: 'Community', colour: '#e1699f',
                tooltip: 'Community tickets <b>{{ Community Ticket }}%</b>',
            },
            {
                value: 'Bradford Youth Pass', title: 'Youth Pass', colour: '#437e2a',
                tooltip: 'Bradford Youth Pass tickets <b>{{ Bradford Youth Pass }}%</b>',
            },
            {
                value: 'Accessible Ticket', title: 'Accessible', colour: '#be9006',
                tooltip: 'Accessible tickets <b>{{ Accessible Ticket }}%</b>',
            },
            {
                value: 'Other', title: 'Other', colour: '#F8D9E7',
                tooltip: 'Other tickets <b>{{ Other }}%</b>',
            },
        ].filter(x => Object.keys(ticketsByType).includes(x.value));
}}

<figure>
{{ comp.oi.chart.waffle({
    config: {
        data: [tickets.by_type.reduce(ticketReducer, {})],
        size: [20, 15],
        series: series,
        legend: {
            show: true,
            position: 'bottom',
        },
    }
}) }}
<figcaption>
    Proportion of ticket types sold by type of ticket.
</figcaption>
</figure>
</div>
<div>
<p>The graph to shows the percentage of tickets by type of ticket.</p>
<p>Tickets types are as described below</p>
<ul>
<li>
    <b>Child Tickets</b> and <b>Senior Tickets</b> are concessionary tickets based on age.
    These might differ from event to event.
</li>
<li>
{{# TODO update description based on feedback from Richard Dunbar #}}
    <b>Community Tickets</b> are distributed to specific communities by the Bradford 2025 team.
</li>
<li>
    <b>Accessible Tickets</b> includes <b>BSL Interpreted</b>, <b>Audio Description</b>, <b>Wheelchair User</b> and <b>Essential Companion</b> tickets
</li>
</ul>
</div>
</section>

<section>
<h3>Tickets by event</h3>

{{# {{ comp.oi.table({ config: {
    data: tickets.by_event,
    columns: [
        { name: 'event_name', label: 'Event name' },
        { name: 'event_start', label: 'Start time', template: '{{ start | strftime("%Y-%m-%d") }}' },
        { name: 'tickets', label: 'Tickets', align: 'right' },
    ]
}}) }} #}}

<table>
<thead>
<tr class="c-yellow">
<th scope="col">Event name</th>
<th scope="col">Event start time</th>
<th scope="col">Tickets sold</th>
</tr>
</thead>
<tbody>
{{ for r of tickets.by_event }}
<tr>
    <th scope="row">{{ r.event_name }}</th>
    <td>{{ r.start |> date('BD25_LONG_DATETIME') }}</td>
    <td class="right">{{ r.tickets |> toLocaleString }}</td>
</tr>
{{ /for }}
</tbody>

</table>

</section>

</section>
{{ /if }}