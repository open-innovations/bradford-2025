---
css: |
    [data-comp=big-number] {
        display: flex !important;
        flex-direction: column;
        align-items: center;
        & p {
            margin-block: 0;
        }
        & .label {
            font-size: min(1.5em, 10vw);
            font-weight: 300;
        }
        & .number {
            font-size: min(4em, var(--big-number-size, 20vw));
            font-weight: bold;
            text-align: center;
        }
    }
js: |
    const observer = new IntersectionObserver(
        (entries, observer) => {
            for (const entry of entries) {
                if (!entry.isIntersecting) continue;
                entry.target.animate();
                observer.unobserve(entry.target);
            }
        },
        {
            threshold: 0.75,
        }
    );
    document.querySelectorAll('[data-comp=big-number][data-animate]').forEach(numberBlock => {
        const numericEl = numberBlock.querySelector('span.numeric');
        const target = +(numberBlock.dataset.number);
        const roundingOptions = JSON.parse(numberBlock.dataset?.roundingOptions || '{}');
        // Set the duration in seconds
        const duration = (numberBlock.dataset && numberBlock.dataset.duration ? parseFloat(numberBlock.dataset?.duration) : 1);
        const setValue = (n,opt) => {
            numericEl.innerHTML = n.toLocaleString(undefined, opt);
        };

        function animate() {
            let start = new Date();
            let t,value;
            const updateNumber = () => {
                t = (new Date() - start)/1000;
                value = target*(t/duration);
                setValue(value,roundingOptions);
                if (Math.abs(value) >= Math.abs(target)) {
                    clearInterval(timer);
                    setValue(target);
                }
            }
            let timer = setInterval(updateNumber, 40);
        }
        numericEl.animate = animate;
        observer.observe(numericEl);
    })
---
<div
    data-comp="big-number"
    {{ if classes }}class="{{ classes || ""}}"{{ /if }}
    {{ if animate -}}
    data-animate data-number="{{ number }}"
    {{- if roundingOptions }} data-rounding-options={{ JSON.stringify(roundingOptions) }}{{ /if -}}
    {{- if duration }} data-duration="{{ duration }}"{{ /if -}}
    {{ /if -}}
>
{{ if label }}<p class="label">{{ label }}</p>{{ /if -}}
    <p class="number">
        <span class="numeric">{{ number.toLocaleString(undefined, roundingOptions) -}}</span>
        {{- if suffix }}<span class="suffix">{{ suffix }}</span>{{ /if -}}
    </p>
{{ content }}
</div>