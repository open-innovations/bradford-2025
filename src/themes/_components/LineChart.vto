{{> 
    function calculateMaxvalue() {
        const values = data.map(d => series.map(s => d[s.y]));
        const trueMax = Math.max(...values.flat());
        if (trueMax > 1000) {
            return Math.ceil((trueMax+1) / 250 ) * 250;
        }
        if (trueMax > 100) {
            return Math.ceil((trueMax+1) / 25 ) * 25;
        }
        return Math.ceil((trueMax+1) / 10 ) * 10;
    }
    let maxValue = calculateMaxvalue();

	function getYTicks(){
		let spacing,n,lo,hi,y,ticks = [],f = 1,min = 0,max = maxValue;
		let pre = data[0].preunit||"";
		let post = data[0].postunit||"";
		
		// Find the range
		range = max - min;

		// Work out a spacing and then a scale factor
		if(range > 0){
			spacing = Math.pow(10,Math.floor(Math.log10(range)));
			n = range/spacing;
			if(n < 3) f = 0.5;
			if(n > 5) f = 2;
		}else{
			spacing = 1;
		}

		// Update the tick spacing
		spacing *= f;
		// Find the new minimum/maximum to use for the scale
		lo = Math.floor(min/spacing)*spacing;
		hi = Math.floor(max/spacing)*spacing;

		for(y = lo; y <= hi ; y += spacing){
			// Round the number in case of errors
			y = Math.floor(y/spacing)*spacing;
			ticks.push({'value':y,'label':(pre+y.toLocaleString()+post),'grid':true});
		}
		return ticks;
	}
	
	function decimalYear(p1){
		if(typeof p1==="string") p1 = new Date(p1);
		let sy = new Date(p1);
		// Start of year
		sy.setUTCMonth(0);
		sy.setUTCDate(1);
		sy.setUTCHours(0);
		sy.setUTCMinutes(0);
		sy.setUTCSeconds(0);
		// Start of next year
		let ey = new Date(sy);
		ey.setUTCFullYear(sy.getUTCFullYear()+1);
		p1 = sy.getUTCFullYear() + (p1-sy)/(ey-sy);
		return p1;
	}
	/* Port of strftime() by T. H. Doan (https://thdoan.github.io/strftime/)
	 *
	 * Day of year (%j) code based on Joe Orost's answer:
	 * http://stackoverflow.com/questions/8619879/javascript-calculate-the-day-of-the-year-1-366
	 *
	 * Week number (%V) code based on Taco van den Broek's prototype:
	 * http://techblog.procurios.nl/k/news/view/33796/14863/calculate-iso-8601-week-and-year-in-javascript.html
	 */
	function strftime(e,t){if("string"!=typeof e)return"";t instanceof Date||(t=new Date);const a=t.getDay(),r=t.getDate(),n=t.getMonth(),o=t.getFullYear(),i=t.getHours(),s=t.getTime(),l=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],u=["January","February","March","April","May","June","July","August","September","October","November","December"],c=[0,31,59,90,120,151,181,212,243,273,304,334],g=()=>{const e=new Date(t);return e.setDate(r-(a+6)%7+3),e},m=(e,t)=>(Math.pow(10,t)+e+"").slice(1);return e.replace(/%[a-z]+\b/gi,(e=>(({"%a":l[a].slice(0,3),"%A":l[a],"%b":u[n].slice(0,3),"%B":u[n],"%c":t.toUTCString().replace(",",""),"%C":Math.floor(o/100),"%d":m(r,2),"%e":r,"%F":new Date(s-6e4*t.getTimezoneOffset()).toISOString().slice(0,10),"%G":g().getFullYear(),"%g":(g().getFullYear()+"").slice(2),"%H":m(i,2),"%I":m((i+11)%12+1,2),"%j":m(c[n]+r+(n>1&&(o%4==0&&o%100!=0||o%400==0)?1:0),3),"%k":i,"%l":(i+11)%12+1,"%m":m(n+1,2),"%n":n+1,"%M":m(t.getMinutes(),2),"%p":i<12?"AM":"PM","%P":i<12?"am":"pm","%s":Math.round(s/1e3),"%S":m(t.getSeconds(),2),"%u":a||7,"%V":(()=>{const e=g(),t=e.valueOf();e.setMonth(0,1);const a=e.getDay();return 4!==a&&e.setMonth(0,1+(4-a+7)%7),m(1+Math.ceil((t-e)/6048e5),2)})(),"%w":a,"%x":t.toLocaleDateString(),"%X":t.toLocaleTimeString(),"%y":(o+"").slice(2),"%Y":o,"%z":t.toTimeString().replace(/.+GMT([+-]\d+).+/,"$1"),"%Z":t.toTimeString().replace(/.+\((.+?)\)$/,"$1"),"%Zs":new Intl.DateTimeFormat("default",{timeZoneName:"short"}).formatToParts(t).find((e=>"timeZoneName"===e.type))?.value}[e]||"")+""||e)))}
	function getTimeTicks(opts){
		opts = {
			...{syear:2024,eyear:2024,spacing:1,format:'%b %y',bigTick:0,smallTick:0},
			...opts||{}
		}
		let ticks = [];
		let d,i,m,tick,dt;
		for(let y = opts.syear; y <= opts.eyear; y++){
			for(i = 0; i < 12 ; i++){
				m = i+1;
				d = y + "-" + (m<10 ? '0':'') + m + '-01';
				dt = new Date(d + 'T12:00Z');
				tick = {value:decimalYear(d)};
				if(opts.smallTick) tick.tickSize = opts.smallTick;
				if(i%opts.spacing==0){
					tick.label = strftime(opts.format,dt);
					if(opts.bigTick) tick.tickSize = opts.bigTick;
				}
				ticks.push(tick);
			}
		}
		return ticks;
	}

}}
{{ comp.oi.chart.line({
    config: {
        data: data,
        width: 900,
        height: 400,
        columns: [
            {
                name: "decimal_year",
                template: `{{ ${dateField} | strptime("${dateFormat || '%Y-%m-%d'}") | decimalYear() }}`
            },
            {
                name: "pretty_date",
                template: `{{ ${dateField} | strptime("${dateFormat || '%Y-%m-%d'}") | strftime("${prettyDate || '%d %b %y'}") }}`
            }
        ],
        series: series.map(s => ({
            tooltip: seriesTooltip || "<b>{{ _title }}</b>\n{{ pretty_date }}: {{ _y }}",
            ...s,
        })),
        axis: {
            x: {
                title: { label: labels.x },
                ticks: getTimeTicks({syear:2024,eyear:2025,spacing:3,format:"%b %Y",bigTick:(typeof bigTick==="number" ? bigTick : 10),smallTick:(typeof smallTick==="number" ? smallTick : 5)}),
            },
            y: {
                grid: { show: true, 'stroke-width': 0.5 },        
                title: { label: labels.y },
                min: 0,
                max: maxValue,
				ticks: getYTicks()
            },
        },
    }
}) }}