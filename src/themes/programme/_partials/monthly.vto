<h2>Events and audiences by month</h2>

<p>In this section we look at events, audience and participant data by month and by specific events programmes.</p>

{{>
    const eventsByMonth = events.total_by_month.map(function(row){
		// Internally the date has been converted into a UTC time, so we fudge it here by applying the timezone offset
		safemonth = (new Date(row.month.getTime() - row.month.getTimezoneOffset()*60000) ).toISOString().substr(0,10);
		return {
			...row,
			projects: Object.entries(events.monthly_breakdown.find(r => row.month.toISOString() == r.month.toISOString()))
				.filter(r => (r[0] !== 'month') && (r[1] > 0))
				.toSorted((a, b) => b[1] - a[1])
				.reduce((a, c) => ({...a, [c[0]]: c[1]}), {}),
			safemonth: safemonth,
			Month: row.month.toLocaleDateString(undefined, { month: "long", year: "numeric" }),
			iso: safemonth.substr(0,7),
		}
	});

}}

{{ comp dashboard.Frame }}
	{{ comp dashboard.Cell }}
		{{ comp.LineChart({
			data: eventsByMonth,
			dateField: 'safemonth',
			prettyDate: '%B %Y',
			seriesTooltip: "<b>{{ _title }}</b>\n{{ pretty_date }}: <b>{{ _y }}</b><br /><a href=\"#{{ iso }}\">See details below</a>",
			series: [{
				title: 'Events',
				x: 'decimal_year',
				y: 'Events',
				colour: oiColour.names.yellow
			}],
			labels: {
				x: '',
				y: 'Number of events'
			},
			bigTick: 10,
			smallTick: 4,
		}) }}
	{{ /comp }}
	{{ comp dashboard.Cell }}
		{{ comp.LineChart({
			data: eventsByMonth,
			dateField: 'safemonth',
			prettyDate: '%B %Y',
			seriesTooltip: "<b>{{ _title }}</b>\n{{ pretty_date }}: <b>{{ _y }}</b><br /><a href=\"#{{ iso }}\">See details below</a>",
			series: [{
				title: 'Audience',
				x: 'decimal_year',
				y: 'Audience',
				colour: oiColour.names.green
			}],
			labels: {
				x: '',
				y: 'Audience figures'
			},
			bigTick: 10,
			smallTick: 4,
		}) }}
	{{ /comp }}
{{ /comp }}

<h3>Monthly breakdown</h3>
{{ for item of eventsByMonth }}
<div id="{{ item.iso }}">
	<h4 class="month">{{ item.Month }}</h4>
	<p>Audience: {{ item.Audience.toLocaleString() }}, Events: {{ item.Events.toLocaleString() }}</p>
	{{ comp Details {'summary':'Event details' } }}
		{{> 
			let eventlist = [];
			for(p in item.projects){
				eventlist.push({Project:p,Events:item.projects[p]});
			}
		}}
		{{ comp.oi.table({
			config: {
				data: eventlist,
				columns: [
					{name:'Project',sortable:true,header:true},
					{name:'Events',sortable:true,class:'',scale:scales.yellow}
				],
				head: { class: 'c-yellow' }
			}
		}) }}
	{{ /comp }}
</div>
{{ /for }}

<style>
h4.month { margin-bottom: 0; }
h4.month + p { margin-block: 0.25rem; }
details summary:focus { outline: 0; }
</style>

{{# This script will open a <details> if the anchor #}}
<script>
function ready(fn){
	if(document.readyState != 'loading') fn();
	else document.addEventListener('DOMContentLoaded', fn);
}
function openDetailsIfAnchorHidden(target){
	const elTarget = document.getElementById(target);
	if (!elTarget) return; // No such element in DOM. Do nothing
	// Open all <details> ancestors
	let elDetails = elTarget.querySelector('details');
	while (elDetails) {
		if (elDetails.matches("details")) elDetails.open = true;
		elDetails = elDetails.parentElement;
	}
}

ready(function(){
	// Attach event
	window.addEventListener("popstate", (event) => {
		openDetailsIfAnchorHidden(location.href.substr(location.href.indexOf('#')+1));
	});
	const anchor = location.href.split("#")[1];
	if(anchor) openDetailsIfAnchorHidden(anchor);
});
</script>
	


