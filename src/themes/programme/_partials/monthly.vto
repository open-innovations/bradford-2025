<h2>Summary of events and audiences by month</h2>

{{>
    function makeTooltip(row) {
        const tooltip = [];

        tooltip.push(`<p>${ row.Events } events in ${ row.Month }</p>`);

        tooltip.push('<p>')
        for (const p of Object.entries(row.projects)) {
            tooltip.push(`<b>${p[0]}</b>: ${p[1]}<br>`);
        }
        tooltip.push('</p>')

        return tooltip.join('');
    }
    const eventsByMonth = events.total_by_month.map(row => ({
        ...row,
        projects: Object.entries(events.monthly_breakdown.find(r => row.month.toISOString() == r.month.toISOString()))
            .filter(r => (r[0] !== 'month') && (r[1] > 0))
            .toSorted((a, b) => b[1] - a[1])
            .reduce((a, c) => ({...a, [c[0]]: c[1]}), {}),
        Month: row.month.toLocaleDateString(undefined, { month: "long", year: "numeric" })
    }))
    .map(r => ({
        ...r,
        tooltip: makeTooltip(r),
    }))
}}

{{ comp dashboard.Frame }}
{{ comp dashboard.Cell }}
{{ comp.oi.chart.bar({
    config: {
        data: eventsByMonth,
        category: 'Month',
        series: [
            { value: 'Events', title: 'Events', colour: oiColour.names.yellow, tooltip: 'tooltip' },
        ],
    },
}) }}
{{ /comp }}

{{ comp dashboard.Cell }}
{{ comp.oi.chart.bar({
    config: {
        data: eventsByMonth,
        category: 'Month',
        series: [
            { value: 'Audience', title: 'Audience', colour: oiColour.names.green, },
        ],
    },
}) }}
{{ /comp }}
{{ /comp }}
