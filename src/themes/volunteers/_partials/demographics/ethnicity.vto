<h3 class="full-width keep-with-next">Volunteers by Ethnicity</h3>
{{>
const by_ethnicity = demographics
    .filter((x) => x.category == 'ethnicity')
    .filter(x => x.value)
    .reduce((a, c) => ({ ...a, [c.variable]: c.value }), { TOTAL: total })
const by_ethnicity_suppressed = total - Object.entries(by_ethnicity)
    .filter(([k, v]) => k !== 'TOTAL')
    .reduce((a, c) => a + c[1], 0)
const suppressed_ethnicity_count = demographics
    .filter((x) => x.category == 'ethnicity').filter(x => !x.value).length;
}}

<div class="keep-with-next">
    <p>
        The chart shows the breakdown of volunteers by ethnicity.
    </p>
    <p>
        There are {{ by_ethnicity.UNSPECIFIED }} volunteer records with no recorded ethnic group.
    </p>
    <p>
        {{ by_ethnicity_suppressed }} volunteers have registered one of {{ suppressed_ethnicity_count }} ethnicities
        with fewer than 10 respondents in each category. These are grouped together in the graph.
    </p>
</div>

<div>
    {{ set ethnicity_series = Object.entries(by_ethnicity)
        .map(([ value, count ]) => ({ value, count }))
        .filter(x => !['TOTAL'].includes(x.value))
        .toSorted((a, b) => b.count - a.count)
        .map((x, i) => ({
            value: x.value,
            title: x.value === 'UNSPECIFIED' ? 'Missing data' : x.value,
            colour: oiColour.series[i]
        }))
    }}

    {{ comp.oi.chart.waffle({
        config: {
            data: [ by_ethnicity ],
            total: 'TOTAL',
            series: [ ...ethnicity_series, undefinedSeries ],
            size: [16, 8],
            legend: { show: true, position: 'top' },
        }
    }) }}
</div>
