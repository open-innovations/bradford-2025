{{> 
    function calculateMaxvalue() {
        const values = data.map(d => series.map(s => d[s.y]));
        const trueMax = Math.max(...values.flat());
        console.log({ trueMax });
        if (trueMax > 1000) {
            return Math.ceil((trueMax+1) / 250 ) * 250;
        }
        if (trueMax > 100) {
            return Math.ceil((trueMax+1) / 25 ) * 25;
        }
        return Math.ceil((trueMax+1) / 10 ) * 10;
    }
    let maxValue = calculateMaxvalue();
    console.log({ maxValue })
}}
{{ comp.oi.chart.line({
    config: {
        data: data,
        width: 900,
        height: 400,
        columns: [
            {
                name: "decimal_year",
                template: `{{ ${dateField} | strptime("${dateFormat || '%Y-%m-%d'}") | decimalYear() }}`
            },
            {
                name: "pretty_date",
                template: `{{ ${dateField} | strptime("${dateFormat || '%Y-%m-%d'}") | strftime("${prettyDate || '%d %b %y'}") }}`
            }
        ],
        series: series.map(s => ({
            tooltip: "<b>{{ _title }}</b>\n{{ pretty_date }}: {{ _y }}",
            ...s,
        })),
        axis: {
            x: {
                title: { label: labels.x },
                ticks: [
                    { value: 2024.0, label: 'Jan 2024' },
                    { value: 2024.25, label: 'Apr 2024' },
                    { value: 2024.5, label: 'Jul 2024' },
                    { value: 2024.75, label: 'Oct 2024' },
                    { value: 2025.0, label: 'Jan 2025' },
                    { value: 2025.25, label: 'Apr 2025' },
                    { value: 2025.5, label: 'Jul 2025' },
                    { value: 2025.75, label: 'Oct 2025' },
                ],
            },
            y: {
                grid: { show: true, 'stroke-width': 0.5 },        
                title: { label: labels.y },
                min: 0,
                max: maxValue,
            },
        },
    }
}) }}