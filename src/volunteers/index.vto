---
title: Volunteers
description: |
    Volunteers are at the heart of Bradford 2025.
    Explore data related to the volunteering programme.

layout: templates/page.vto

scales:
    yellow: 'hsl(46, 50%, 80%) 0%, #e4ae00 100%'
    greenfade: "#1c1b1f 0%, #45d10a 100%"
    yellowfade: "#1c1b1f 0%, #e4ae00 100%"
undefinedSeries:
    title: No data available
    colour: grey
keyMap:
    1. Monitoring & Evaluation cumulative: Signed up
    2. Sign Up to Induction cumulative: Induction booked
    3. Fully Inducted Volunteers cumulative: Active volunteers
dashboardDetails:
    Signed up: 
        note: People who have signed up as potential volunteers
    Induction booked:
        note: People who have passed initial screening and have an induction booked #}}
    Active volunteers:
        note: People who have completed the volunteer sign-up process
---

{{# TODO move this to a pipeline #}}
{{ set summary = Object.entries(checkpoints_monthly[checkpoints_monthly.length - 1])
    .filter(([k,v]) => k.includes('cumulative'))
    .reduce((result, [k, v]) => ({ ...result, [keyMap[k] || k]: v }), {})
}}

<section>
{{ set summaryDashboard = Object.entries(summary)
    .map(([title, value]) => ({
        title, value,
        ...dashboardDetails[title]
    }))
}}

{{ comp.oi.dashboard({
    config: {
        data: summaryDashboard,
        title: "title",
        value: "value",
        note: "note",
        width: "30%",
        panels: [
            { name: "Signed up", colour: "pink" },
            { name: "Induction booked", colour: "yellow" },
            { name: "Active volunteers", colour: "green" },
        ]
    }
}) }}
</section>

<hr>
<section class="grid regular">
<h2 class="full-width">Geographic distribution of volunteers</h2>

<div>
    <h3>Volunteers by Bradford MDC Ward</h3>
    {{ comp.oi.map.hex_cartogram({
        config: {
            hexjson: hexes.bd_2024_opt4,
            data: geo_summary.filter(x => x.type == 'osward'),
            scale: scales.yellow,
            matchKey: 'code',
            value: 'count',
            label: '{{ n | slice(0,3) }}',
            tooltip: '{{ n }}: <strong>{{ count }}</strong>'
        }
    }) }}
</div>

<div>
    <h3>Volunteers by Bradford Postcode</h3>
    {{ comp.oi.map.svg({ 
        config: {
            geojson: { key: "name", data: geojson.bd_pcd },
            data: geo_summary.filter(x => x.type == 'postcode_area'),
            bounds: {
                lat: { min: 53.72, max: 53.97 },
                lon: { min: -2.07, max: -1.63}
            },
            value: 'count', 
            scale: scales.yellow,
            key: 'code',
            label: '{{ code }}',
            columns: [
                { name: 'tooltip', template: '{{ code }}: <strong>{{ count }}</strong> volunteers' },
            ],
            tooltip: 'tooltip',
    } }) }}
</div>

<div class="block c-green">
    <p>
        The maps show the geographic distribution of volunteers across Bradford, either by ward
        or by postcode. In either case, the postcode provided by the volunteer at sign-up
        has been used to identify the geography.
    </p>
</div>
</section>

<hr>

<section class="grid regular" style="--grid-basis: 30rem;">
<h2 class="full-width">Volunteering Signups</h2>
<div>
{{ comp.oi.chart.line({ 
    config: {
        data: checkpoints_monthly,
        width: 900, 
        height: 400,
        columns: [{
			name: "decimal_year",
			template: "{{ month ending | strptime('%Y-%m-%d') | decimalYear() }}"
		}],
        series: [
        {
            title: '2. Sign Up to Induction cumulative',
            x: 'decimal_year',
            y: '2. Sign Up to Induction cumulative',
        },  
        {
            title: '1. Monitoring & Evaluation cumulative',
            x: 'decimal_year',
            y: '1. Monitoring & Evaluation cumulative',
        },
        ],
        axis: {
        x: {
            title: {
            label: 'Month',
            },
            tick: {
            spacing: 1
            }
        },
        y: {
            grid: {
            show: true,
            'stroke-width': 0.5
            },        
            title: {
            label: 'Checkpoints'
            },
            min:0,
            max: 1000
        }
    }
} }) }}
</div>
</section>

<hr>

<section class="grid regular" style="--grid-basis: 30rem;">
<h2 class="full-width">Demographics of volunteers</h2>

<div class="block full-width c-yellow">
    <p>
        This section shows summaries of volunteers by demographic groupings, including age and ethnicity.
    </p>
</div>

<div>
    <h3>Volunteers by age</h3>
    {{ comp.BarChart({
        data: demographics.filter((x) => x.category == 'age_range'),
        category: 'variable',
        series: [
            {
                title: 'Age range',
                value: 'value'
            }
        ],
    }) }}
</div>

<div>
    <h3>Volunteers by Ethnicity</h3>
    {{ set by_ethnicity = demographics
        .filter((x) => x.category == 'ethnicity')
        .filter(x => x.value)
        .reduce((a, c) => ({ ...a, [c.variable]: c.value }), { TOTAL: summary['Signed up'] })
    }}
    {{ set ethnicity_series = Object.entries(by_ethnicity)
        .map(([ value, count ]) => ({ value, count }))
        .filter(x => !['TOTAL', 'UNSPECIFIED'].includes(x.value))
        .toSorted((a, b) => b.count - a.count)
        .map((x, i) => ({ value: x.value, colour: oiColour.series[i] }))
    }}

    {{ comp.oi.chart.waffle({
        config: {
            data: [ by_ethnicity ],
            total: 'TOTAL',
            series: [ ...ethnicity_series, undefinedSeries ],
            size: [16, 8],
            legend: { show: true, position: 'top' },
        }
    }) }}
</div>

<div>
    <h3>Volunteers by Sex</h3>
    {{ set by_sex = demographics
        .filter((x) => x.category == 'sex')
        .filter(x => x.value)
        .reduce((a, c) => ({ ...a, [c.variable]: c.value }), { TOTAL: summary['Signed up'] })
    }}
    {{ set sex_series = Object.entries(by_sex)
        .map(([ value, count ]) => ({ value, count }))
        .filter(x => !['TOTAL', 'UNSPECIFIED'].includes(x.value))
        .toSorted((a, b) => b.count - a.count)
        .map((x, i) => ({ value: x.value, title: x.value, colour: oiColour.series[i] }))
    }}

    {{ comp.oi.chart.waffle({
        config: {
            data: [ by_sex ],
            total: 'TOTAL',
            series: [...sex_series, undefinedSeries ],
            size: [16, 8],
            legend: { show: true, position: 'top' },
        }
    }) }}
</div>

</section>

<hr>

<section class="grid regular" style="--grid-basis: 30rem;">
<h2 class="full-width">Volunteering Shifts</h2>
<div>
<h3>Shifts</h3>
{{ comp.oi.chart.line({ 
    config: {
        data: shifts_weekly,
        width: 900,
        height: 400,
        columns: [{
			name: "decimal_year",
			template: "{{ week ending | strptime('%Y-%m-%d') | decimalYear() }}"
		}],
        series: [
        {
            title: 'Shifts',
            x: 'decimal_year',
            y: 'attended cumulative',
        },  
        ],
        axis: {
        x: {
            title: {
            label: 'Week ending',
            },
        },
        y: {
            grid: {
            show: true,
            'stroke-width': 0.5
            },        
            title: {
            label: 'Shifts Completed'
            },
            min:0,
            max: 500,
        }
    }
} }) }}
</div>


<div>
<h3>Hours</h3>
{{ comp.oi.chart.line({ 
    config: {
        data: shifts_weekly,
        width: 900,
        height: 400,
        columns: [{
			name: "decimal_year",
			template: "{{ week ending | strptime('%Y-%m-%d') | decimalYear() }}"
		}],
        series: [
        {
            title: 'Total hours',
            x: 'decimal_year',
            y: 'hours cumulative',
        },  
        ],
        axis: {
        x: {
            title: {
            label: 'Week ending',
            },
        },
        y: {
            grid: {
            show: true,
            'stroke-width': 0.5
            },        
            title: {
            label: 'Shift hours completed'
            },
            min:0,
            max: 4000
        }
    }
} }) }}
</div>

<h3 class="full-width">Monthly summary</h3>
<div>
{{ comp.LineChart({
    data: shifts_monthly,
    series: [
        {
            title: 'Total shifts',
            x: 'decimal_year',
            y: 'attended',
        },  
    ],
    labels: {
        x: 'Week ending',
        y: 'Shifts completed',
    }
})}}
</div>

<div>
{{ comp.LineChart({
    data: shifts_monthly,
    series: [
        {
            title: 'Total hours',
            x: 'decimal_year',
            y: 'hours',
        },  
    ],
    labels: {
        x: 'Week ending',
        y: 'Shift hours completed',
    }
})}}
</div>
</section>
