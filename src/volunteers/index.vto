---
draft: true
title: Volunteers
description: |
    Volunteers are at the heart of Bradford 2025.
    Explore data related to the volunteering programme.
layout: templates/page.vto

scales:
    yellow: 'hsl(46, 50%, 90%) 0%, #e4ae00 100%'
    greenfade: "#1c1b1f 0%, #45d10a 100%"
    yellowfade: "#1c1b1f 0%, #e4ae00 100%"
undefinedSeries:
    title: Suppressed values
    colour: '#777'
keyMap:
    1. Monitoring & Evaluation cumulative: Signed up
    2. Sign Up to Induction cumulative: Induction booked
    3. Fully Inducted Volunteers cumulative: Active volunteers
checkpointDetails:
    Signed up: 
        note: People who have signed up as potential volunteers
    Induction booked:
        note: People who have passed initial screening and have an induction booked
    Active volunteers:
        note: People who have completed the volunteer sign-up process
---

{{# TODO move this to a pipeline #}}
{{ set total = geo_summary.find(x => x.type === 'TOTAL' && x.code === 'TOTAL').count }}
{{ set summary = Object.entries(checkpoints_monthly[checkpoints_monthly.length - 1])
    .filter(([k,v]) => k.includes('cumulative'))
    .reduce((result, [k, v]) => ({ ...result, [keyMap[k] || k]: v }), {})
}}
{{>
    const wardSignUps = geojson.bd_wards.features.map(x => x.properties.WD24CD)
        .map(code => ({ code, count: 0, ...geo_summary.find(w => w.code == code) }))
        .map(d => ({
            ...d,
            count: d.count <= 5 && d.count > 0 ? 5 : d.count,
            countLabel: d.count <= 5 && d.count > 0 ? '5 or fewer' : d.count.toString()
        }) )
    const postcodeSignUps = geojson.postcodes.features.map(x => x.properties.name)
        .map(code => ({ code, count: 0, ...geo_summary.find(w => w.code == code) }))
        .map(d => ({
            ...d,
            count: d.count <= 5 && d.count > 0 ? 5 : d.count,
            countLabel: d.count <= 5 && d.count > 0 ? '5 or fewer' : d.count.toString()
        }) )
}}

<section class="block">
<h2>Summary</h2>
<p>
    This section summarises the key measures related to volunteers.
    You can explore the details by scrolling down.
</p>
{{ set summaryDashboard = Object.entries(checkpointDetails)
    .map(([title, details]) => ({
        title,
        value: summary[title] || null,
        ...details
    }))
}}

{{ comp.oi.dashboard({
    config: {
        data: summaryDashboard,
        title: "title",
        value: "value",
        note: "note",
        width: "30%",
        panels: [
            { name: "Signed up", colour: "pink" },
            { name: "Induction booked", colour: "yellow" },
            { name: "Active volunteers", colour: "green" },
        ]
    }
}) }}
</section>

<hr>

<section class="grid regular">
<h2 class="full-width">Geographic distribution of volunteers</h2>

<div>
    <h3>Overall geographic summary</h3>
    <p>
        There are a total of
        {{ geo_summary.find(x => x.type === 'TOTAL' && x.code === 'TOTAL').count }}
        people registered in the Rosterfy system (in all states), of which
        {{ geo_summary.find(x => x.type === 'TOTAL' && x.code === 'UNKNOWN').count }}
        have not yet provided postcode data.
        The table below shows the distribution volunteers by local authorities where
        the count of volunteers is above 5.
    </p>
    
    <div class="block centred">
    <table style="margin-inline:auto;">
    <thead>
        <tr>
            <th>Local Authority</th>
            <th>Count of volunteers</th>
        </tr>
    </thead>
    <tbody>
    {{ for la of geo_summary.filter(x => x.type === 'oslaua' && x.count > 5).sort((a, b) => b.count - a.count) }}
        <tr><td>{{ codes.la[la.code]?.name || la.code }}</td><td>{{ la.count }}</td></tr>
    {{ /for }}
    </tbody>
    </table>
    </div>
    <p>
        The subsequent maps show the geographic distribution of volunteers across Bradford, either by ward
        or by postcode. In either case, the postcode provided by the volunteer at sign-up
        has been used to identify the geography.
    </p>
</div>

<div class="block">
    <h3>Hexmap of volunteers by ward</h3>
    <p>
        The <q>hexmap</q> shows the number of volunteers per Bradford ward.
        Hexmaps are useful as they present all elements as similarly sized,
        and can avoid providing a skewed view of the data.
    </p>
    <p>
        Hover over the hexes to see the values and details of names.
    </p>
    {{ comp.oi.map.hex_cartogram({
        config: {
            hexjson: hexes.bd_2024,
            data: wardSignUps,
            scale: scales.yellow,
            matchKey: 'code',
            value: 'count',
            label: '{{ n | slice(0,3) }}',
            tooltip: '{{ n }}: <strong>{{ countLabel }} volunteers</strong>'
        }
    }) }}
</div>
<div class="block">
    <h3>Geographic map of volunteers by ward</h3>
    <p>
        The geographic map shows the equivalent data as the hexmap,
        but in a geographic layout.
    </p>
    {{# TODO Sort out the tooltip for this #}}
    {{ comp.oi.map.svg({ 
        config: {
            geojson: { key: "WD24CD", data: geojson.bd_wards },
            data: wardSignUps,
            bounds: {
                lat: { min: 53.72, max: 53.97 },
                lon: { min: -2.07, max: -1.63 }
            },
            value: 'count', 
            scale: scales.yellow,
            key: 'code',
            label: '{{ code }}',
            columns: [
                { name: 'tooltip', template: '{{ code }}: <strong>{{ countLabel }}</strong> volunteers' },
            ],
            tooltip: 'tooltip',
    } }) }}
</div>

<div class="block">
    <h3>Volunteers by Bradford Postcode</h3>
    <p>
        Some Bradford residents associate with their postcode.
        The map displays the number of volunteers by Bradford postcode. 
    </p>
    {{ comp.oi.map.svg({ 
        config: {
            geojson: { key: "name", data: geojson.postcodes },
            data: postcodeSignUps,
            bounds: {
                lat: { min: 53.72, max: 53.97 },
                lon: { min: -2.07, max: -1.63}
            },
            value: 'count', 
            scale: scales.yellow,
            key: 'code',
            label: '{{ code }}',
            columns: [
                { name: 'tooltip', template: '{{ code }}: <strong>{{ countLabel }}</strong> volunteers' },
            ],
            tooltip: 'tooltip',
    } }) }}
</div>
</section>

<hr>

{{ include './_partials/checkpoints.vto' }}

<hr>

{{ include './_partials/demographics.vto' }}

<hr>

{{ include "./_partials/shifts.vto" }}
